@inherits AdminPage
@page "/{department}/Admin/Equipments"
@using Coworking.Shared.Services
@using AntDesign.TableModels

@inject IAdminEquipmentsGrpcService AdminService
@inject IMessageService Message

<Table DataSource="EquipmentModelsList" TItem="EquipmentModelDto" Loading="EquipmentModelsList==null" OnExpand="OnTableExpand">
    <ColumnDefinitions>
        <PropertyColumn Title="Название" Property="c=>c.Name"/>
        <PropertyColumn Title="Описание" Property="c=>c.Description"/>
        <ActionColumn Title="Действия">
            <Space Direction="DirectionVHType.Horizontal">
                <SpaceItem>
                    <Button OnClick="() => HandleEquipmentAddRequest(context)">Добавить оборудование</Button>
                </SpaceItem>
                <SpaceItem>
                    <Button OnClick="() => { EquipmentModelToEditOrCreate = context; CreatingNew = false; }">Редактировать</Button>
                </SpaceItem>
                <SpaceItem>
                    <Button Danger OnClick="() => EquipmentModelToDelete = context">Удалить</Button>
                </SpaceItem>
            </Space>
        </ActionColumn>
    </ColumnDefinitions>
    
    <ExpandTemplate Context="rowData">
        <Table DataSource="rowData.Data.Equipments" TItem="EquipmentDto" Loading="rowData.Data.Equipments == null">
            <ColumnDefinitions>
                <PropertyColumn Title="Инвентарный номер" Property="c => c.InvNumber"></PropertyColumn>
                <PropertyColumn Title="Коментарий" Property="c => c.Comment"></PropertyColumn>
                <ActionColumn Title="Действия">
                    <Space Direction="DirectionVHType.Horizontal">
                        <SpaceItem>
                            <Button OnClick="() => { EquipmentToEditOrCreate = context; CreatingNew = false; }">Редактировать</Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Danger OnClick="() => EquipmentToDelete = context">Удалить</Button>
                        </SpaceItem>
                    </Space>
                </ActionColumn>
            </ColumnDefinitions>
        </Table>
    </ExpandTemplate>
</Table>

<DeleteConfirmation TModel="EquipmentModelDto" 
                    Model="EquipmentModelToDelete" 
                    OnDelete="HandleEquipmentModelDelete"
                    OnCancel="() => EquipmentModelToDelete = null">
    Подтвердите удаление модели оборудования @EquipmentModelToDelete?.Name, это действие нельзя отменить. 
</DeleteConfirmation>
<DeleteConfirmation TModel="EquipmentDto"
                    Model="EquipmentToDelete"
                    OnDelete="HandleEquipmentDelete"
                    OnCancel="() => EquipmentToDelete = null">
    Подтвердите удаление оборудования @EquipmentToDelete?.InvNumber, это действие нельзя отменить.
</DeleteConfirmation>

<Drawer Visible="EquipmentModelToEditOrCreate != null"
        OnClose="() => EquipmentModelToEditOrCreate = null">
    <Form TModel="EquipmentModelDto" 
          Model="EquipmentModelToEditOrCreate ?? new EquipmentModelDto()">
        <FormItem Label="Название">
            <Input TValue="string" @bind-Value="@context.Name"/>
        </FormItem>
        <FormItem Label="Описание">
            <Input TValue="string" @bind-Value="@context.Description"/>
        </FormItem>
        
        <FormItem>
            @if (CreatingNew)
            {
                <Button Type="@ButtonType.Primary" HtmlType="submit" OnClick="HandleEquipmentModelAdd">
                    Добавить
                </Button>
            }
            else
            {
                <Button Type="@ButtonType.Primary" HtmlType="submit" OnClick="HandleEquipmentModelEdit">
                    Изменить
                </Button>
            }
        </FormItem>
    </Form>
</Drawer>

<Drawer Visible="EquipmentToEditOrCreate != null"
        OnClose="() => EquipmentToEditOrCreate = null">
    <Form TModel="EquipmentDto" 
          Model="EquipmentToEditOrCreate ?? new EquipmentDto()">
        <FormItem Label="Инвентарный номер">
            <Input TValue="string" @bind-Value="@context.InvNumber"/>
        </FormItem>
        
        <FormItem Label="Комментарий">
            <Input TValue="string" @bind-Value="@context.Comment"/>
        </FormItem>
        
        <FormItem>
            @if (CreatingNew)
            {
                <Button Type="@ButtonType.Primary" HtmlType="submit" OnClick="HandleEquipmentAdd">
                    Добавить
                </Button>
            }
            else
            {
                <Button Type="@ButtonType.Primary" HtmlType="submit" OnClick="HandleEquipmentEdit">
                    Изменить
                </Button>
            }
        </FormItem>
    </Form>
</Drawer>

@code {

    [Parameter]
    public string Department { get; set; } = null!;

    public List<EquipmentModelDto>? EquipmentModelsList { get; set; }
    
    public EquipmentModelDto? EquipmentModelToDelete { get; set; }
    public EquipmentDto? EquipmentToDelete { get; set; }

    public EquipmentModelDto? EquipmentModelToEditOrCreate { get; set; }
    public EquipmentDto? EquipmentToEditOrCreate { get; set; }
    public bool CreatingNew { get; set; }
    
    
    protected override async Task OnInitializedAsync()
    {
        var request = new GetAllEquipmentModelsRequest()
        {
            DepartmentName = Department
        };
        var response = await AdminService.GetAllEquipmentModels(request);
        EquipmentModelsList = response.EquipmentModels;
    }

    public async Task OnTableExpand(RowData<EquipmentModelDto> rowData)
    {
        if (rowData.Data.Equipments != null)
        {
            return;
        }
        var eqModel = rowData.Data;
        
        await LoadEquipmentsForModel(eqModel);
    }

    private async Task LoadEquipmentsForModel(EquipmentModelDto eqModel)
    {
        var request = new GetEquipmentsForModelRequest()
        {
            DepartmentName = Department,
            EquipmentModelId = eqModel.Id
        };

        var response = await AdminService.GetEquipmentsForModel(request);

        eqModel.Equipments = response.Equipments;
    }

    private void HandleEquipmentModelDelete(EquipmentModelDto obj)
    {
        EquipmentModelsList?.Remove(obj);
        EquipmentModelToDelete = null;
    }

    private void HandleEquipmentDelete(EquipmentDto obj)
    {
        var eqModel = EquipmentModelsList?.FirstOrDefault(x => x.Id == obj.EquipmentModelId);
        if (eqModel != null)
        {
            eqModel.Equipments?.Remove(obj);
        }
        EquipmentToDelete = null;
    }

    private void HandleEquipmentModelAdd()
    {
        EquipmentModelsList?.Add(EquipmentModelToEditOrCreate!);
        EquipmentModelToEditOrCreate = null;
    }

    private void HandleEquipmentModelEdit()
    {
        EquipmentModelToEditOrCreate = null;
    }

    private async Task HandleEquipmentAddRequest(EquipmentModelDto model)
    {
        CreatingNew = true;
        if (model.Equipments == null)
        {
            await LoadEquipmentsForModel(model);
        }
        EquipmentToEditOrCreate = new EquipmentDto()
        {
            EquipmentModelId = model.Id
        };
    }

    private async Task HandleEquipmentAdd()
    {
        var eqModel = EquipmentModelsList?
            .FirstOrDefault(eqM => eqM.Id == EquipmentToEditOrCreate?.EquipmentModelId);

        if (eqModel == null)
        {
            await Message.Error("Что-то пошло не так");
            return;
        }
        
        eqModel.Equipments!.Add(EquipmentToEditOrCreate!);

        EquipmentToEditOrCreate = null;
    }

    private void HandleEquipmentEdit()
    {
        EquipmentToEditOrCreate = null;
    }

}