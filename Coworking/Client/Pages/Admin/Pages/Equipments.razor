@inherits AdminPage
@page "/{department}/Admin/Equipments"
@using Coworking.Shared.Services
@using AntDesign.TableModels

@inject IAdminEquipmentsGrpcService AdminService
@inject IMessageService Message

<Table DataSource="EquipmentModelsList" TItem="EquipmentModelDto" Loading="EquipmentModelsList==null" OnExpand="OnTableExpand">
    <ColumnDefinitions>
        <PropertyColumn Title="Название" Property="c=>c.Name"/>
        <PropertyColumn Title="Описание" Property="c=>c.Description"/>
        <ActionColumn Title="Действия">
            <Space Direction="DirectionVHType.Horizontal">
                <SpaceItem>
                    <Button OnClick="() => HandleEquipmentCreateRequest(context)">Добавить оборудование</Button>
                </SpaceItem>
                <SpaceItem>
                    <Button OnClick="() => { EquipmentModelToUpdateOrCreate = context; CreatingNew = false; }">Редактировать</Button>
                </SpaceItem>
                <SpaceItem>
                    <Button Danger OnClick="() => EquipmentModelToDelete = context">Удалить</Button>
                </SpaceItem>
            </Space>
        </ActionColumn>
    </ColumnDefinitions>
    
    <ExpandTemplate Context="rowData">
        <Table DataSource="rowData.Data.Equipments" TItem="EquipmentDto" Loading="rowData.Data.Equipments == null">
            <ColumnDefinitions>
                <PropertyColumn Title="Инвентарный номер" Property="c => c.InvNumber"></PropertyColumn>
                <PropertyColumn Title="Коментарий" Property="c => c.Comment"></PropertyColumn>
                <ActionColumn Title="Действия">
                    <Space Direction="DirectionVHType.Horizontal">
                        <SpaceItem>
                            <Button OnClick="() => { EquipmentToUpdateOrCreate = context; CreatingNew = false; }">Редактировать</Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Danger OnClick="() => EquipmentToDelete = context">Удалить</Button>
                        </SpaceItem>
                    </Space>
                </ActionColumn>
            </ColumnDefinitions>
        </Table>
    </ExpandTemplate>
</Table>
<Button OnClick="() => { EquipmentModelToUpdateOrCreate = new EquipmentModelDto(); CreatingNew = true; }">Добавить новое оборудование</Button>

<DeleteConfirmation TModel="EquipmentModelDto" 
                    Model="EquipmentModelToDelete" 
                    OnDelete="HandleEquipmentModelDelete"
                    OnCancel="() => EquipmentModelToDelete = null">
    Подтвердите удаление модели оборудования @EquipmentModelToDelete?.Name, это действие нельзя отменить. 
</DeleteConfirmation>
<DeleteConfirmation TModel="EquipmentDto"
                    Model="EquipmentToDelete"
                    OnDelete="HandleEquipmentDelete"
                    OnCancel="() => EquipmentToDelete = null">
    Подтвердите удаление оборудования @EquipmentToDelete?.InvNumber, это действие нельзя отменить.
</DeleteConfirmation>

<Drawer Visible="EquipmentModelToUpdateOrCreate != null"
        OnClose="() => EquipmentModelToUpdateOrCreate = null">
    <Form TModel="EquipmentModelDto" 
          Model="EquipmentModelToUpdateOrCreate ?? new EquipmentModelDto()">
        <FormItem Label="Название">
            <Input TValue="string" @bind-Value="@context.Name"/>
        </FormItem>
        <FormItem Label="Описание">
            <Input TValue="string" @bind-Value="@context.Description"/>
        </FormItem>
        
        <FormItem>
            @if (CreatingNew)
            {
                <Button Type="@ButtonType.Primary" HtmlType="submit" OnClick="HandleEquipmentModelCreate">
                    Добавить
                </Button>
            }
            else
            {
                <Button Type="@ButtonType.Primary" HtmlType="submit" OnClick="HandleEquipmentModelUpdate">
                    Изменить
                </Button>
            }
        </FormItem>
    </Form>
</Drawer>

<Drawer Visible="EquipmentToUpdateOrCreate != null"
        OnClose="() => EquipmentToUpdateOrCreate = null">
    <Form TModel="EquipmentDto" 
          Model="EquipmentToUpdateOrCreate ?? new EquipmentDto()">
        <FormItem Label="Инвентарный номер">
            <Input TValue="string" @bind-Value="@context.InvNumber"/>
        </FormItem>
        
        <FormItem Label="Комментарий">
            <Input TValue="string" @bind-Value="@context.Comment"/>
        </FormItem>
        
        <FormItem>
            @if (CreatingNew)
            {
                <Button Type="@ButtonType.Primary" HtmlType="submit" OnClick="HandleEquipmentCreate">
                    Добавить
                </Button>
            }
            else
            {
                <Button Type="@ButtonType.Primary" HtmlType="submit" OnClick="HandleEquipmentUpdate">
                    Изменить
                </Button>
            }
        </FormItem>
    </Form>
</Drawer>

@code {

    [Parameter]
    public string Department { get; set; } = null!;

    public List<EquipmentModelDto>? EquipmentModelsList { get; set; }
    
    public EquipmentModelDto? EquipmentModelToDelete { get; set; }
    public EquipmentDto? EquipmentToDelete { get; set; }

    public EquipmentModelDto? EquipmentModelToUpdateOrCreate { get; set; }
    public EquipmentDto? EquipmentToUpdateOrCreate { get; set; }
    public bool CreatingNew { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await ReadEquipmentModels();
    }
    
    public async Task OnTableExpand(RowData<EquipmentModelDto> rowData)
    {
        if (rowData.Data.Equipments != null) return;
        
        var eqModel = rowData.Data;
        
        await ReadEquipmentsForModel(eqModel);
    }
    
    #region EquipmentModelCUD
    
    private async Task ReadEquipmentModels()
    {
        var request = new GetAllEquipmentModelsRequest()
        {
            DepartmentName = Department
        };
        var response = await AdminService.GetAllEquipmentModels(request);
        EquipmentModelsList = response.EquipmentModels;
    }
    
    private async Task HandleEquipmentModelCreate()
    {
        if (EquipmentModelToUpdateOrCreate == null) return;

        var request = new CreateEquipmentModelRequest()
        {
            DepartmentName = Department,
            Description = EquipmentModelToUpdateOrCreate.Description,
            Id = EquipmentModelToUpdateOrCreate.Id,
            Name = EquipmentModelToUpdateOrCreate.Name
        };
        var response = await AdminService.CreateEquipmentModel(request);
        EquipmentModelToUpdateOrCreate.Id = response.Id;

        EquipmentModelsList?.Add(EquipmentModelToUpdateOrCreate!);
        EquipmentModelToUpdateOrCreate = null;
    }

    private async Task HandleEquipmentModelUpdate()
    {
        if (EquipmentModelToUpdateOrCreate == null) return;

        var request = new UpdateEquipmentModelRequest()
        {
            DepartmentName = Department,
            Description = EquipmentModelToUpdateOrCreate.Description,
            Id = EquipmentModelToUpdateOrCreate.Id,
            Name = EquipmentModelToUpdateOrCreate.Name
        };
        var response = await AdminService.UpdateEquipmentModel(request);
        
        EquipmentModelToUpdateOrCreate = null;
    }

    private async Task HandleEquipmentModelDelete(EquipmentModelDto obj)
    {
        if (EquipmentModelToDelete == null) return;

        var request = new DeleteEquipmentModelRequest()
        {
            DepartmentName = Department,
            EquipmentModelId = EquipmentModelToDelete.Id
        };
        var response = await AdminService.DeleteEquipmentModel(request);

        EquipmentModelsList?.Remove(obj);
        EquipmentModelToDelete = null;
    }

    #endregion
    
    #region EquipmentCUD
    
    private async Task HandleEquipmentCreateRequest(EquipmentModelDto model)
    {
        CreatingNew = true;
        if (model.Equipments == null)
        {
            await ReadEquipmentsForModel(model);
        }
        EquipmentToUpdateOrCreate = new EquipmentDto()
        {
            EquipmentModelId = model.Id
        };
    }

    private async Task ReadEquipmentsForModel(EquipmentModelDto eqModel)
    {
        var request = new GetEquipmentsForModelRequest()
        {
            DepartmentName = Department,
            EquipmentModelId = eqModel.Id
        };

        var response = await AdminService.GetEquipmentsForModel(request);

        eqModel.Equipments = response.Equipments ?? new List<EquipmentDto>();
    }
    
    private async Task HandleEquipmentCreate()
    {
        if (EquipmentToUpdateOrCreate == null) return;

        var request = new CreateEquipmentRequest()
        {
            Comment = EquipmentToUpdateOrCreate.Comment,
            DepartmentName = Department,
            EquipmentModelId = EquipmentToUpdateOrCreate.EquipmentModelId,
            InvNumber = EquipmentToUpdateOrCreate.InvNumber
        };
        var response = await AdminService.CreateEquipment(request);
        EquipmentToUpdateOrCreate.Id = response.Id;
        
        var eqModel = EquipmentModelsList?
            .FirstOrDefault(eqM => eqM.Id == EquipmentToUpdateOrCreate?.EquipmentModelId);
        if (eqModel == null)
        {
            await Message.Error("Что-то пошло не так");
            return;
        }
        eqModel.Equipments!.Add(EquipmentToUpdateOrCreate!);
        EquipmentToUpdateOrCreate = null;
    }

    private async Task HandleEquipmentUpdate()
    {
        if (EquipmentToUpdateOrCreate == null) return;

        var request = new UpdateEquipmentRequest()
        {
            Comment = EquipmentToUpdateOrCreate.Comment,
            DepartmentName = Department,
            Id = EquipmentToUpdateOrCreate.Id,
            InvNumber = EquipmentToUpdateOrCreate.InvNumber
        };
        var response = await AdminService.UpdateEquipment(request);
        
        EquipmentToUpdateOrCreate = null;
    }
    
    private async Task HandleEquipmentDelete(EquipmentDto obj)
    {
        if (EquipmentToDelete == null) return;

        var request = new DeleteEquipmentRequest()
        {
            DepartmentName = Department,
            EquipmentId = EquipmentToDelete.Id
        };
        var response = await AdminService.DeleteEquipment(request);
        
        var eqModel = EquipmentModelsList?.FirstOrDefault(x => x.Id == obj.EquipmentModelId);
        if (eqModel != null)
        {
            eqModel.Equipments?.Remove(obj);
        }
        EquipmentToDelete = null;
    }
    
    #endregion
}